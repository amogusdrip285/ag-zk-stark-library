name: Build Pre-built Binaries

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  build_desktop:
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [x64]
        include:
          - os: macos-latest
            arch: arm64
    runs-on: ${{ matrix.os }}
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-node@v4
      with:
        node-version: 18

    # Install dependencies
    - name: Install Linux dependencies
      if: runner.os == 'Linux'
      run: sudo apt-get update && sudo apt-get install -y libgmp-dev make g++

    - name: Install macOS dependencies
      if: runner.os == 'macOS'
      run: brew install gmp gcc@13

    - name: Install Windows dependencies
      if: runner.os == 'Windows'
      uses: msys2/setup-msys2@v2
      with:
        msystem: MINGW64
        update: true
        install: >-
          make
          mingw-w64-x86_64-gcc

    # Build C++ libraries (OS-specific steps)
    - name: Build libstark and dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sed -i.bak "s|^CFLAGS.*|CFLAGS = -fPIC -std=c++14 -O3 -w|" flags.mk
        sed -i.bak "s|^CPPFLAGS.*|CPPFLAGS = -DNDEBUG|" flags.mk
        make fft algebralib libstark gadgetlib CC=gcc CXX=g++

    - name: Build libstark and dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        echo "/usr/local/opt/gcc@13/bin" >> $GITHUB_PATH
        # Globally disable debugging code
        sed -i.bak 's/CPPFLAGS =/CPPFLAGS = -DNDEBUG/' flags.mk
        # Remove problematic CPU flags from the Makefiles that override CFLAGS
        sed -i.bak 's/-maes -msse4 -mtune=native//g' tinyram/gadgetlib/gadgetlib/Makefile
        sed -i.bak 's/-maes -msse4//g' libSTARK/Makefile
        sed -i.bak 's/-mpclmul//g' algebra/FFT/Makefile
        # Set the base CFLAGS without CPU-specific flags for macOS
        sed -i.bak 's/CFLAGS =/CFLAGS = -fPIC -std=c++14 -O3 -w/' flags.mk
        make fft algebralib libstark gadgetlib CC=gcc-13 CXX=g++-13 AR=gcc-ar-13

    - name: Build libstark and dependencies (Windows)
      if: runner.os == 'Windows'
      shell: msys2 {0}
      run: |
        sed -i.bak "s|^CFLAGS.*|CFLAGS = -fPIC -mssse3 -maes -std=c++14 -O3 -w|" flags.mk
        sed -i.bak "s|^CPPFLAGS.*|CPPFLAGS = -DNDEBUG|" flags.mk
        make fft algebralib libstark gadgetlib CC=gcc CXX=g++

    # Build Node.js addon
    - name: Install and Build Node Addon
      shell: bash
      run: |
        npm install
        # Fix execute permissions for scripts on non-Windows runners
        if [ "$RUNNER_OS" != "Windows" ]; then
          chmod -R +x ./node_modules/.bin
        fi
        npm run prebuild -- --arch ${{ matrix.arch }}
    
    # Upload artifact
    - name: Upload prebuilds
      uses: actions/upload-artifact@v4
      with:
        name: prebuilds-${{ matrix.os }}-${{ matrix.arch }}
        path: prebuilds

  release:
    needs: [build_desktop]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    - uses: actions/download-artifact@v4
      with:
        path: artifacts
    - name: Combine artifacts
      run: |
        mkdir -p release_assets/prebuilds
        find artifacts -name "prebuilds-*" -type d -exec cp -r {}/prebuilds/* release_assets/prebuilds/ \;
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        files: release_assets/**/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}